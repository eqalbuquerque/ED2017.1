#include <iostream>
#include <string>
#include <stack>

using namespace std;

//Emanuel Queiroz de Albuquerque 11409540
//link imagem spoj 
//https://photos.google.com/photo/AF1QipMA2JfbzLH2Rju3HdJNHo27btLCmBNHb12ugq0y

int max(int a,int b){ return a > b ? a : b; } 
int main(){

    int qt;
    cin>>qt;

    while(qt--) {

        string tree; // entradas de usuario
        cin>> tree;

        int in = 0, it = 0, resp = 0; //indice geral, iterador e resposta

        stack<int>ram; // pilha para as folhas
        stack<int>prof; // pilha para a profundidade maxima

        prof.push(-1); // inicializando a pilha

            for(int i = 0; i < tree.length(); i++){
            if(tree.at(i) == 'l'){ //verificar se eh uma folha
                resp = max(resp, 1+ prof.top()); //compara se o caminho maior é a resposta salva ou a da ultima iteração
                while(!ram.empty() && (ram.top() == 2)){ //se existirem mais de duas ramificações, faz pop delas e diminui um profundidade
                    ram.pop();
                    prof.pop();
                }
                if (ram.empty()){ break;} //se a pilha de ramificacoes tá vazia, para o programa
                    //depois dessas checagens, pop e puxa 2 pra sinalizar que a profundidade tem que diminuir
                    ram.pop();
                    ram.push(2);
            }else{
                    //se for n //
                    ram.push (1); //joga 1 na contagem de ramificações
                    prof.push(prof.top()+1); // na pronfundidade verifica qual o que tá no topo e aumenta 1.
                }
            }
                cout << resp << endl; 

                    }

    return 0;

    }
